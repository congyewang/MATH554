select(-c(Site, Srich)) %>%
as.matrix()
beta <- c(1,2,3,4)
X_test
X_test <- df %>%
mutate(rep(1))
select(-c(Site, Srich)) %>%
as.matrix()
X_test <- df %>%
mutate(rep(1))
select(-c(Site, Srich)) %>%
as.matrix()
df %>%
mutate(rep(1))
X_test <- df %>%
mutate(const = rep(1))
select(-c(Site, Srich)) %>%
as.matrix()
library(tidyverse)
library(mvtnorm)
setwd("~/R/MATH554/Quiz/2")
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
X_test <- df %>%
mutate(const = rep(1))
select(-c(Site, Srich)) %>%
as.matrix()
X_test <- df %>%
mutate(const = rep(1))
X_test
X_test <- df %>%
mutate(const = rep(1))
select(-Site, -Srich)) %>%
X_test <- df %>%
mutate(const = rep(1))
select(-Site, -Srich) %>%
as.matrix()
X_test <- df %>%
mutate(const = rep(1)) %>%
select(-Site, -Srich) %>%
as.matrix()
beta <- c(1,2,3,4)
X_test <- df %>%
mutate(const = rep(1)) %>%
select(-Site, -Srich) %>%
as.matrix()
beta <- c(1,2,3,4)
X_test %*% beta
X_test <- df %>%
mutate(const = rep(1)) %>%
select(-Site, -Srich) %>%
as.matrix()
beta <- c(1,2,3,4)
X_test %*% beta %>%
sum()
X_test
X_test <- df %>%
select(-Site, -Srich) %>%
as.matrix() %>%
cbind(rep(1))
beta <- c(1,2,3,4)
X_test %*% beta %>%
sum()
X_test
cbind(rep(1), X_test)
X_test <- df %>%
select(-Site, -Srich) %>%
as.matrix() %>%
X_test <- cbind(rep(1), X_test)
X_test <- df %>%
select(-Site, -Srich) %>%
as.matrix()
X_test <- cbind(rep(1), X_test)
beta <- c(1,2,3,4)
X_test %*% beta %>%
sum()
X_test <- df %>%
select(-Site, -Srich) %>%
as.matrix()
X_test <- cbind(rep(1), X_test)
beta <- c(1,2,3,4)
X_test %*% beta %>%
sum()
nits   = 2000
theta0 = qmodeLR
library(tidyverse)
library(magrittr)
library(mvtnorm)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
fit
ctl <- list(fnscale = -1)
fit <- optim(c(0, 0, 0, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 0, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
ctl <- list(fnscale = -1)
fit <- optim(c(1, 0, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 0, 0, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 0, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(0, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
mod <- glm(ys ~ Xs, family = poisson())
summary(mod)
coef(mod)
mod <- glm(ys ~ Xs, family = poisson())
vcov(mod)
mod <- glm(ys ~ Xs, family = poisson())
as.matrix(vcov(mod))
mod <- glm(ys ~ Xs, family = poisson())
-solve(as.matrix(vcov(mod)))
mod <- glm(ys ~ Xs, family = poisson())
as.matrix(vcov(mod))
mod <- glm(ys ~ Xs, family = poisson())
as.matrix(vcov(mod))
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
version
library(tidyverse)
library(magrittr)
library(mvtnorm)
library(coda)
setwd("~/R/MATH554/Quiz/2")
library(tidyverse)
library(magrittr)
library(mvtnorm)
library(coda)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
help(glm.fit)
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
mod <- glm.fit(x = Xs, y = ys)
mod <- glm.fit(x = Xs, y = ys)
vcov(mod)
mod
mod <- glm(y ~ Xs, family = poisson())
mod <- glm(ys ~ Xs, family = poisson())
vcov(mod)
library(tidyverse)
library(magrittr)
library(mvtnorm)
library(coda)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 0, 0) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(10, -0.6, -0.2, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
qmodeLR
qVLR
mod <- glm(ys ~ Xs, family = poisson())
qVLR <- as.matrix(vcov(mod))
mod <- glm(ys ~ Xs, family = poisson())
qVLR <- as.matrix(vcov(mod))
qVLR
Xs
as.matrix(vcov(mod))[1,]
as.matrix(vcov(mod))[c(1,3,4),]
as.matrix(vcov(mod))[c(1,3,4),c(1,3,4)]
mod <- glm(ys ~ Xs %*% beta, family = poisson())
qVLR <- as.matrix(vcov(mod))[c(1,3,4),c(1,3,4)]
mod <- glm(ys ~ Xs %*% beta, family = poisson())
qVLR <- as.matrix(vcov(mod))
qVLR
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
Design_matrix <- Xs %*% beta
Design_matrix
beta %*% Xs
t(Xs) %*% beta
Xs
beta
Xs %*% t(beta)
Xs %*% beta
Xs %*% beta
mod <- glm(ys ~ Xs, family = poisson())
qVLR <- as.matrix(vcov(mod))
qVLR
mod <- glm(ys ~ Xs, family = poisson())
qVLR <- as.matrix(vcov(mod))[c(1,3,4), c(1,3,4)]
qVLR
nits   = 50000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
nits   = 50000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
