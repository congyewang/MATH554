load(file="./MCMC.rData")
LogisticReg$ys
class(LogisticReg$ys)
df$Srich
as.matrix(df$Srich)
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(beta, log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
log.pi.poisson.reg.fn(beta, ys, Xs)
log.pi.poisson.reg.fn(c(1,1,1,1)), ys, Xs)
log.pi.poisson.reg.fn(c(1,1,1,1), ys, Xs)
log.pi.poisson.reg.fn(c(1,1,1,1), ys, Xs)
log.pi.poisson.reg.fn(c(1,1,1,2), ys, Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control <- ctl, hessian=TRUE, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
qVLR
qmodeLR
qVLR
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
qmodeLR
chol(qmodeLR)
qVLR
load(file="./MCMC.rData")
log.pi.logistic.reg.fn=function(betas,ys,X) {
D=100*diag(3)
sds=sqrt(diag(D))
log.prior=sum(dnorm(betas,0,sds,log=TRUE))
etas= X %*% betas
ps=exp(etas)/(1+exp(etas))
log.like=sum(ys*log(ps)+(1-ys)*log(1-ps))
return(log.prior+log.like)
}
ctl=list(fnscale=-1)
fit2=optim(c(1,1,1),log.pi.logistic.reg.fn,control=ctl,hessian=TRUE,ys=LogisticReg$ys,X=LogisticReg$X)
qmodeLR=fit2$par
qVLR= -solve(fit2$hessian)
qmodeLR
qVLR
nits=2000
theta0=qmodeLR
lambda=1.3
mcoutRWMlogreg=rwm(nits,theta0,log.pi.logistic.reg.fn,lambda,qVLR,ys=LogisticReg$ys,X=LogisticReg$X)
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
nits=2000
theta0=qmodeLR
lambda=1.3
mcoutRWMlogreg=rwm(nits,theta0,log.pi.logistic.reg.fn,lambda,qVLR,ys=LogisticReg$ys,X=LogisticReg$X)
par(mfrow=c(3,2))
plot(0:nits,mcoutRWMlogreg$store[,1],type="l",xlab="iteration",ylab="beta1")
plot(density(mcoutRWMlogreg$store[,1]),main="",xlab="beta1")
plot(0:nits,mcoutRWMlogreg$store[,2],type="l",xlab="iteration",ylab="beta2")
plot(density(mcoutRWMlogreg$store[,2]),main="",xlab="beta2")
plot(0:nits,mcoutRWMlogreg$store[,3],type="l",xlab="iteration",ylab="beta3")
plot(density(mcoutRWMlogreg$store[,3]),main="",xlab="beta3")
essb1=effectiveSize(mcoutRWMlogreg$store[,1])
essb2=effectiveSize(mcoutRWMlogreg$store[,2])
essb3=effectiveSize(mcoutRWMlogreg$store[,3])
qVLR
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
library(tidyverse)
library(mvtnorm)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
library(tidyverse)
library(magrittr)
library(mvtnorm)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
qmodeLR
qVLR
matrix(c(2.092872e-111, -7.728523e-119, 1.221307e-109, -9.128528e-111, -6.474231e-117, 1.281296e-116, -7.728703e-119, -2.828070e-121, -2.021987e-109, -6.474231e-117, 2.092786e-111, 1.983247e-112, 1.983183e-112, -2.829412e-121, -9.128528e-111, 6.816795e-112), nrow = 4, ncol = 4)
test_m <- matrix(c(2.092872e-111, -7.728523e-119, 1.221307e-109, -9.128528e-111, -6.474231e-117, 1.281296e-116, -7.728703e-119, -2.828070e-121, -2.021987e-109, -6.474231e-117, 2.092786e-111, 1.983247e-112, 1.983183e-112, -2.829412e-121, -9.128528e-111, 6.816795e-112), nrow = 4, ncol = 4)
chol(test_m)
t(test_m)
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
fit
setwd("~/R/MATH554/notes")
load(file="./MCMC.rData")
log.pi.logistic.reg.fn=function(betas,ys,X) {
D=100*diag(3)
sds=sqrt(diag(D))
log.prior=sum(dnorm(betas,0,sds,log=TRUE))
etas= X %*% betas
ps=exp(etas)/(1+exp(etas))
log.like=sum(ys*log(ps)+(1-ys)*log(1-ps))
return(log.prior+log.like)
}
ctl=list(fnscale=-1)
fit2=optim(c(1,1,1),log.pi.logistic.reg.fn,control=ctl,hessian=TRUE,ys=LogisticReg$ys,X=LogisticReg$X)
qmodeLR=fit2$par
qVLR= -solve(fit2$hessian)
qmodeLR
qVLR
nits=2000
theta0=qmodeLR
lambda=1.3
mcoutRWMlogreg=rwm(nits,theta0,log.pi.logistic.reg.fn,lambda,qVLR,ys=LogisticReg$ys,X=LogisticReg$X)
par(mfrow=c(3,2))
plot(0:nits,mcoutRWMlogreg$store[,1],type="l",xlab="iteration",ylab="beta1")
plot(density(mcoutRWMlogreg$store[,1]),main="",xlab="beta1")
plot(0:nits,mcoutRWMlogreg$store[,2],type="l",xlab="iteration",ylab="beta2")
plot(density(mcoutRWMlogreg$store[,2]),main="",xlab="beta2")
plot(0:nits,mcoutRWMlogreg$store[,3],type="l",xlab="iteration",ylab="beta3")
plot(density(mcoutRWMlogreg$store[,3]),main="",xlab="beta3")
essb1=effectiveSize(mcoutRWMlogreg$store[,1])
essb2=effectiveSize(mcoutRWMlogreg$store[,2])
essb3=effectiveSize(mcoutRWMlogreg$store[,3])
fit2
fit2
library(tidyverse)
library(magrittr)
library(mvtnorm)
setwd("~/R/MATH554/Quiz/2")
rwm=function(nits,theta0,log.pi,lambda,qV,...) {
d=length(theta0)
if (is.null(qV)) {
A=diag(d)
}
else {
A=t(chol(qV))
}
store=matrix(nrow=nits+1,ncol=d+1)
psis=matrix(nrow=nits,ncol=d)
nacc=0
theta.curr=theta0
log.pi.curr=log.pi(theta.curr,...)
store[1,]=c(theta.curr,log.pi.curr)
for (i in 1:nits) {
psi=theta.curr+lambda*A%*%rnorm(d); psis[i,]=psi
log.pi.prop=log.pi(psi,...)
log.alpha=log.pi.prop-log.pi.curr
if (log(runif(1))<log.alpha) {
theta.curr=psi
log.pi.curr=log.pi.prop
nacc=nacc+1
}
store[i+1,]=c(theta.curr,log.pi.curr)
}
return(list(acc=nacc/nits,store=store,psis=psis))
}
Habitat_mapping <- function(variance) {
z <- switch(variance,
"Forest" = 0,
"Bog"    = 1
)
return(z)
}
df <- read_delim("./labants.txt", delim = "\t")
df$Habitat <- sapply(df$Habitat, Habitat_mapping)
summary(df)
df
# Verity X*beta & Extract ys
Xs <- df %>%
select(-Site, -Srich) %>%
as.matrix()
Xs <- cbind(rep(1), Xs)
beta <- c(1,2,3,4)
Xs %*% beta %>%
sum()
ys <- as.matrix(df$Srich)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
ctl <- list(fnscale = -1)
fit <- optim(c(1,1,1,1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
fit2
fit$hessian
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian%*%solve(fit$hessian)
fit$hessian
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
qVLR
fit$hessian
fit$hessian %*% solve(fit$hessian)
qmodeLR
ctl <- list(fnscale = -1)
fit <- optim(c(0.1, 0.1, 0.1, 0.1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
log.pi.poisson.reg.fn <- function(betas,ys,X) {
D <- matrix(data = c(10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 100), nrow = 4, ncol = 4) # Variance of Normal Distribution
sds <- sqrt(diag(D)) # Standard Deviation without NaN of Normal Distribution
ms <- c(10, -1, 1, 1) # Mean Value of Normal Distribution
log.prior <- sum(dnorm(betas, ms, sds, log = TRUE)) # Prior of Log Format
lambdas <- exp(X %*% betas)
log.like <- sum(ys * log(lambdas) - lambdas - lfactorial(ys))
return(log.prior + log.like)
}
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.logistic.reg.fn, lambda, qVLR, ys = ys, X = Xs)
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
fit
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
fit
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(0.1, 0.1, 0.1, 0.1), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 2), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
ctl <- list(fnscale = -1)
fit <- optim(c(1, 1, 1, 0), log.pi.poisson.reg.fn, control = ctl, hessian = TRUE, ys = ys, X = Xs)
qmodeLR <- fit$par
qVLR <- -solve(fit$hessian)
qmodeLR
qVLR
nits   = 2000
theta0 = qmodeLR
lambda = 1.3
mcoutRWMpoissonreg <- rwm(nits, theta0, log.pi.poisson.reg.fn, lambda, qVLR, ys = ys, X = Xs)
par(mfrow=c(3,2))
plot(0:nits, mcoutRWMpoissonreg$store[,1], type = "l", xlab = "iteration", ylab = "beta1")
plot(density(mcoutRWMpoissonreg$store[,1]), main = "", xlab = "beta1")
plot(0:nits, mcoutRWMpoissonreg$store[,2], type = "l", xlab = "iteration", ylab = "beta2")
plot(density(mcoutRWMpoissonreg$store[,2]), main = "", xlab = "beta2")
plot(0:nits, mcoutRWMpoissonreg$store[,3], type = "l", xlab = "iteration", ylab = "beta3")
plot(density(mcoutRWMpoissonreg$store[,3]), main = "", xlab = "beta3")
